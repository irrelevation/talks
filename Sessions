# Sessions

"Stateful" in the context of sessions means "I save session information on the server".
"Stateless" means "I save session infos on the client side".

| Capabilities | Cookies | Authorization Header |
| --- | --- | --- |
| Can contain identifiers & session objects | ✔ | ✔ |
| Works with multiple domains | ❌ | ✔ |
| Works "out of the box" | ✔ | ❌ |
| Works in XHR contexts | ✔ | ✔ |
| Works in other contexts (eg DOM, websockets) | ✔ | ❌ |

## Tokens

Pros:
  - scalable
  - works well for cross origin APIs

Cons:
  - Easy to read and manipulate.
  - You need to ensure confidentiality.
  - You need to ensure integrity.
  - you have to write the token handling logic
  - Only present on XHR calls, unless you implement a service worker
  
## Cookies
Work well for small and medium apps. Don't choose token based authentication just because "that's the way you do things".
Cookie does not mean stateful backend. I t lives on the client and is just a browser storage mechanism and a transport mechanism.

Pros:
  - servers are generally considered safe trusted environments and a good place to store session information. In order to change session infos saved on a server an attacker would have to have access to the server anyways and at that point session security is not our biggest worry anymore.
  - Cookies are automatically handled by the browser

Cons:
  - not easily scalable
  - vulnerable to CSRF attacks
  - you have to implement CORS policies against CSRF attacks.
    - Use existing middleware solutions if possible. CORS is error prone if you on't know what you're doing.
    - Otherwise use strict whitelisting on origin headers (don't pattern match, use equality comparisions only) and implements tests for common mistakes
  
## JSON Web Tokens

base 64 encoded string. encryption is optional but recommended if your session data contains sensitive information.
don't confuse decoding for verification!

### Symmetric Signatures

encryption:
HMAC = data (i.e. token) + secret key

decryption:
HMAC + secret key = data

Pros:
  - Easier to use
  
Cons:
  - Limited applicability. If you sign somethin, but someone else needs to verify it, you're out of luck, bc you can't share your key.

### Asymmetric Signatures
RSA
encryption:
data + private key = signature

decryption:
data + signature + public key = true/false

How "login with google" works:
Open ID connect - asymmetricly encrypted JWT

### How to store your keys

### keyrotation
You have to rotate (i.e. change) keys regularly.

problem:
you want to be able to change keys from time to time, but you need a way to inform people about what public key to use.
solutions:
Key identifier (kid) - added to the header, so you can easyly switch keys in the future and let people know about it
Key URLs - added to the header so the other party can look up necessary infos there. As the verifying side, you have to be a little more careful here, and make sure you are actually visiting the correct URL and not getting tricked into using fake key information.

https://jwt.io/
